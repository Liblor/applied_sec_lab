---
- hosts: ansservers
  tasks:
    - name: Create folder for TLS CSR and certificates
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
      with_items:
        - "/home/{{ UNAME }}/tls/csr"
        - "/home/{{ UNAME }}/tls/crl"
        - "/home/{{ UNAME }}/tls/certs"

- hosts: all, !ansservers
  become: yes
  roles:
    - pyopenssl
  tasks:
    - name: Create HTTPS keys
      openssl_privatekey:
        path: "/home/{{ UNAME }}/pki/private/iMovies_{{ ansible_hostname }}_tls_key.pem"
        type: RSA
        size: 4096
        force: "{{ FORCE_TLS_CERT_REGEN }}"

        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"

    - name: Create CSR for HTTPS keys
      openssl_csr:
        path: "/home/{{ UNAME }}/pki/csr/iMovies_{{ ansible_hostname }}_tls_csr.pem"
        privatekey_path: "/home/{{ UNAME }}/pki/private/iMovies_{{ ansible_hostname }}_tls_key.pem"

        country_name: "{{ COUNTRY_NAME }}"
        state_or_province_name: "{{ STATE_OR_PROVINCE_NAME }}"
        locality_name: "{{ LOCALITY_NAME }}"
        organization_name: "{{ ORGANIZATION_NAME }}"
        common_name: "{{ ansible_hostname }}"
        # Externally reachable servers have the imovies domain as SAN
        subjectAltName: "{{ 'DNS:www.imovies.ch, ' + 'DNS:' + ansible_hostname if ('webservers' in groups and ansible_hostname in groups['webservers']) else 'DNS:' + ansible_hostname }}"

        key_usage:
          - digitalSignature
          - keyEncipherment

        extendedKeyUsage:
          - serverAuth
          - clientAuth

        force: "{{ FORCE_TLS_CERT_REGEN }}"

        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"

    - name: Transfer CSR to config server
      synchronize:
        mode: pull
        src: "/home/{{ UNAME }}/pki/csr/iMovies_{{ ansible_hostname }}_tls_csr.pem"
        dest: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/tls/csr/"
        group: false
        owner: false
      delegate_to: "{{ groups['ansservers'][0] }}"

- hosts: certservers
  become: yes
  roles:
    - role: revoke-all-certs
      when: FORCE_TLS_CERT_REGEN
  vars:
    ca_folder: "/home/{{ UNAME }}/intermediate_ca"
    openssl_conf_name: Intermediate-CA-openssl.cnf
    crl_name: Intermediate_CA_crl.pem
  tasks:
    - name: Transfer CRL to config server
      synchronize:
        mode: pull
        src: "/home/{{ UNAME }}/intermediate_ca/Intermediate_CA_crl.pem"
        dest: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/tls/crl"
        group: false
        owner: false
      delegate_to: "{{ groups['ansservers'][0] }}"

- hosts: ansservers
  become: yes
  tasks:
    - name: Move TLS CRL to privileged folder
      synchronize:
        src: tls/crl/
        dest: /etc/pki/tls/crl/

- hosts: all, !ansservers
  become: yes
  tasks:
    - name: Distribute new CRL
      synchronize:
        src: /etc/pki/tls/crl/
        dest: /etc/pki/tls/crl/
        rsync_path: "sudo rsync"

    - name: Combine Root CA and intermediate CA CRL
      shell: |
        cat /etc/pki/tls/crl/Root_CA_crl.pem /etc/pki/tls/crl/Intermediate_CA_crl.pem \
        > /etc/pki/tls/crl/tls_crl_chain.pem

# The first core ca signs all internal tls certificates
- hosts: "{{ groups['certservers'][0] }}"
  become: yes
  tasks:
    - name: Create folder for CSRs for TLS certificates on certserver
      file:
        path: "/home/{{ UNAME }}/intermediate_ca/csr/tls"
        state: directory
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"

    - name: Transfer CSR to cert server
      synchronize:
        src: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/tls/csr/"
        dest: "/home/{{ UNAME }}/intermediate_ca/csr/tls/"
        group: false
        owner: false

    # Loop over all files in tls/csr and sign their certificate, the name of which
    # is for <name>_csr.pem --> <name>_crt.pem
    - name: Gather CSRs to sign
      find:
        paths: "/home/{{ UNAME }}/intermediate_ca/csr/tls"
        patterns: "*_csr.pem"
      register: csr_files_glob

    - name: Sign remote server CSRs to create TLS certificates
      command: |
        openssl ca -batch -config Intermediate-CA-openssl.cnf \
        -extensions server_cert -notext \
        -in {{ item.path }} \
        -out certs/{{ (item.path | basename).split('_csr')[0] }}_crt.pem
      args:
        chdir: "/home/{{ UNAME }}/intermediate_ca/"
      with_items:
        - "{{ csr_files_glob.files }}"
      when: FORCE_TLS_CERT_REGEN

    - name: Fix certificate permissions
      file:
        path: "/home/{{ UNAME }}/intermediate_ca/certs/{{ (item.path | basename).split('_csr')[0] }}_crt.pem"
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
      with_items:
        - "{{ csr_files_glob.files }}"
      when: FORCE_TLS_CERT_REGEN

    - name: Create folders for TLS chains
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
        mode: 0700
      with_items:
        - "/home/{{ UNAME }}/intermediate_ca/chains"

    - name: Create certificate chain
      shell: |
        cat "/home/{{ UNAME }}/intermediate_ca/certs/{{ (item.path | basename).split('_csr')[0] }}_crt.pem" \
        "/home/{{ UNAME }}/pki/certs/iMovies_{{ INTERMEDIATE_CERT_PURPOSES[0] }}_{{ ansible_hostname }}_Intermediate_CA_crt.pem" \
        > "/home/{{ UNAME }}/intermediate_ca/chains/{{ (item.path | basename).split('_csr')[0] }}_crt.pem"
      when: FORCE_TLS_CERT_REGEN
      with_items:
        - "{{ csr_files_glob.files }}"

    - name: Transfer certs to config server
      synchronize:
        mode: pull
        src: "/home/{{ UNAME }}/intermediate_ca/chains/"
        dest: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/tls/certs/"
        group: false
        owner: false
      when: FORCE_TLS_CERT_REGEN
      delegate_to: "{{ groups['ansservers'][0] }}"

- hosts: all, !ansservers
  become: yes
  tasks:
    - name: Transfer certificates to corresponding hosts
      synchronize:
        src: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/tls/certs/iMovies_{{ ansible_hostname }}_tls_crt.pem"
        dest: /etc/pki/tls/certs/
      when: FORCE_TLS_CERT_REGEN

    - name: Fix certificate permissions
      file:
        path: "/etc/pki/tls/certs/iMovies_{{ ansible_hostname }}_tls_crt.pem"
        owner: root
        group: root
        mode: 0644
      when: FORCE_TLS_CERT_REGEN


- hosts: dbservers
  become: yes
  tasks:
    - name: Creates directory for mariaDB keys
      file:
        path: /etc/mysql/keys
        state: directory
        owner: mysql
        group: mysql
        mode: 0700

    - name: Convert private key to pkcs#1
      command: "openssl rsa -in /home/{{ UNAME }}/pki/private/iMovies_{{ansible_hostname}}_tls_key.pem -out /etc/mysql/keys/iMovies_{{ inventory_hostname }}_tls_key.pem"

    - name: Fix mysql private key permissions
      file:
        path: "/etc/mysql/keys/iMovies_{{ inventory_hostname }}_tls_key.pem"
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
        mode: 0600
