---
- import_playbook: generate-root-crl.yml
  vars:
    revoke_intermediate_certs: true

- hosts: certservers
  become: yes
  tasks:
    - name: Generate RSA keys for intermediate cert
      openssl_privatekey:
        path: "/home/{{ UNAME }}/pki/private/iMovies_{{ item }}_{{ ansible_hostname }}_Intermediate_CA_key.pem"
        type: RSA
        size: 4096
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
        force: "{{ FORCE_INTERMEDIATE_CA_CERT_REGEN }}"
      with_items:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"

    - name: Create intermediate cert CSR
      openssl_csr:
        path: "/home/{{ UNAME }}/pki/csr/iMovies_{{ item }}_{{ ansible_hostname }}_Intermediate_CA.csr"
        privatekey_path: "/home/{{ UNAME }}/pki/private/iMovies_{{ item }}_{{ ansible_hostname }}_Intermediate_CA_key.pem"

        country_name: "{{ COUNTRY_NAME }}"
        state_or_province_name: "{{ STATE_OR_PROVINCE_NAME }}"
        locality_name: "{{ LOCALITY_NAME }}"
        organization_name: "{{ ORGANIZATION_NAME }}"
        common_name: "iMovies {{ item }} {{ ansible_hostname }} intermediate CA"
        subject_alt_name: "DNS:{{ ansible_hostname }}"

        basic_constraints: "CA:TRUE"
        key_usage:
          - keyCertSign
          - cRLSign
          - digitalSignature

        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
        force: "{{ FORCE_INTERMEDIATE_CA_CERT_REGEN }}"
      with_items:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"

    - name: Transfer intermediate CSR to config server
      synchronize:
        mode: pull
        src: "/home/{{ UNAME }}/pki/csr/iMovies_{{ item }}_{{ ansible_hostname }}_Intermediate_CA.csr"
        dest: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/root_ca/csr"
        group: false
        owner: false
      delegate_to: "{{ groups['ansservers'][0] }}"
      with_items:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"

- hosts: ansservers
  become: yes
  tasks:
    - name: Create intermediate certificate
      command: |
        openssl ca -batch -config Root-CA-openssl.cnf \
        -extensions v3_intermediate_ca -notext \
        -in csr/iMovies_{{ item[0] }}_{{ item[1] }}_Intermediate_CA.csr \
        -out certs/iMovies_{{ item[0] }}_{{ item[1] }}_Intermediate_CA.crt
      args:
        chdir: root_ca/
      with_nested:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"
        - "{{ groups['certservers'] }}"
      when: FORCE_INTERMEDIATE_CA_CERT_REGEN

    - name: Fix certificate owner and group
      file:
        path: "root_ca/certs/iMovies_{{ item[0] }}_{{ item[1] }}_Intermediate_CA.crt"
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
      with_nested:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"
        - "{{ groups['certservers'] }}"
      when: FORCE_INTERMEDIATE_CA_CERT_REGEN

- hosts: certservers
  become: yes
  tasks:
    - name: Distribute intermediate CA certificates
      synchronize:
        src: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/root_ca/certs/iMovies_{{ item }}_{{ ansible_hostname }}_Intermediate_CA.crt"
        dest: /home/{{ UNAME }}/pki/certs/
        owner: false
        group: false
        rsync_path: "sudo rsync"
      with_items:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"
      when: FORCE_INTERMEDIATE_CA_CERT_REGEN

    - name: Fix intermediate CA certificates owner and group
      file:
        path: "/home/{{ UNAME }}/pki/certs/iMovies_{{ item }}_{{ ansible_hostname }}_Intermediate_CA.crt"
        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
      with_items:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"

    - name: Combine certificate and private key for external intermediate CA
      openssl_pkcs12:
        action: export
        path: "/home/{{ UNAME }}/pki/private/iMovies_{{ INTERMEDIATE_CERT_PURPOSES[1] }}_{{ ansible_hostname }}_Intermediate_CA_cert_and_priv_key.pfx"
        privatekey_path: "/home/{{ UNAME }}/pki/private/iMovies_{{ INTERMEDIATE_CERT_PURPOSES[1] }}_{{ ansible_hostname }}_Intermediate_CA_key.pem"
        certificate_path: "/home/{{ UNAME }}/pki/certs/iMovies_{{ INTERMEDIATE_CERT_PURPOSES[1] }}_{{ ansible_hostname }}_Intermediate_CA.crt"
        friendly_name: "{{ansible_hostname}}"
        state: present

        owner: "{{ UNAME }}"
        group: "{{ UNAME }}"
        mode: 0600
        force: "{{ FORCE_INTERMEDIATE_CA_CERT_REGEN }}"

# The intermediate certificate must be installed in the root of trust of
# web servers, otherwise the httpclient of dotnet will fail to validate its
# client certificate for internal TLS communication and refuse to use it.
- hosts: webservers
  become: yes
  tasks:
    - name: Distribute intermediate CA certificates to web server
      synchronize:
        src: "/home/{{ hostvars[groups['ansservers'][0]]['UNAME'] }}/root_ca/certs/iMovies_{{ item[0] }}_{{ item[1] }}_Intermediate_CA.crt"
        dest: /usr/local/share/ca-certificates/
        owner: false
        group: false
        rsync_path: "sudo rsync"
      with_nested:
        - "{{ INTERMEDIATE_CERT_PURPOSES }}"
        - "{{ groups['certservers'] }}"
      when: FORCE_INTERMEDIATE_CA_CERT_REGEN

    - name: Apply new certificate
      command: update-ca-certificates
      when: FORCE_INTERMEDIATE_CA_CERT_REGEN
