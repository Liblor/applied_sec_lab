global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        ssl-default-bind-options force-tlsv13 prefer-client-ciphers
        ssl-default-bind-ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM

        ssl-default-server-options force-tlsv13
        ssl-default-server-ciphers ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES256:ECDH+AES128:!aNULL:!SHA1:!AESCCM

defaults
        log     global
        mode    http
        option  tcplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

# this doesn't deal with decrypting & reencrypting TLS, instead forwarding at the TCP layer.
frontend https-in
        mode tcp
        bind *:443

        # detect SSL connections
        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }

        use_backend webservers if { req_ssl_sni -i imovies.ch || req_ssl_sni -i www.imovies.ch }

backend webservers
        mode tcp
        balance roundrobin

        # maximum SSL session ID length is 32 bytes.
        stick-table type binary len 32 size 30k expire 30m

        acl clienthello req_ssl_hello_type 1
        acl serverhello rep_ssl_hello_type 2

        # use tcp content accepts to detects ssl client and server hello.
        tcp-request inspect-delay 5s
        tcp-request content accept if clienthello

        # no timeout on response inspect delay by default.
        tcp-response content accept if serverhello

        # SSL session ID (SSLID) may be present on a client or server hello.
        # Its length is coded on 1 byte at offset 43 and its value starts
        # at offset 44.

        # Match and learn on request if client hello.
        stick on payload_lv(43,1) if clienthello

        # Learn on response if server hello.
        stick store-response payload_lv(43,1) if serverhello

        # Query a lightweight endpoint that checks the certserver's & DB availabilities
        option httpchk GET /health
        option log-health-checks

        # nginx enforces HTTPS (except for /crl/revoked.crl), so use SSL for checks (check-ssl)
        # ca-file directive to verify the server cert against the standard machine trust store.
        default-server check check-ssl ca-file ca-certificates.crt

        # Ansible: add a list of server entries
        {% for srv_hostname in groups['webservers'] %}
        server srv_{{ srv_hostname }} {{ srv_hostname }}:443
        {% endfor %}


frontend http-in
        mode http
        bind *:80
        option httplog

        use_backend webservers-crl if { path -i -m str /crl/revoked.crl }

backend webservers-crl
        mode http
        balance roundrobin

        stick on src table webservers

        option httpchk GET /health
        option log-health-checks

        # Health checks over SSL even though CRL is plain HTTP
        default-server check port 443 check-ssl ca-file ca-certificates.crt

        {% for srv_hostname in groups['webservers'] %}
        server srv_{{ srv_hostname }} {{ srv_hostname }}:80
        {% endfor %}
